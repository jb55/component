#!/usr/bin/env node

/**
 * Module dependencies.
 */

var Batch = require('batch')
var Builder = require('component-builder');
var component = require('..');
var fs = require('fs');
var mkdir = require('mkdirp');
var path = require('path')
var program = require('commander')
var requirejs = require('component-require')
var exists = fs.existsSync || path.existsSync
var utils = component.utils;
var log = component.utils.log;

// options

program
  .option('-d, --dev', 'build development dependencies')
  .option('-s, --standalone <name>', 'build a stand-alone version of the component')
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-n, --name <file>', 'base name for build files defaulting to build', 'build')
  .option('-f, --fileName <file>', 'output filename, works best with -c and -j')
  .option('-v, --verbose', 'output verbose build information')
  .option('-p, --prefix <str>', 'prefix css asset urls with <str>')
  .option('--css', 'build css')
  .option('--js', 'build js')
  .option('-c, --copy', 'copy files instead of linking')
  .option('-u, --use <name>', 'use the given build plugin(s)')
  .option('-R, --no-require', 'exclude require from build')
  .option('-v, --verbose', 'verbose output')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ component build');
  console.log();
  console.log('    # build to ./dist as assets.js, assets.css');
  console.log('    $ component build -o dist -n assets');
  console.log();
  console.log('    # build standalone as window.$');
  console.log('    $ component build --standalone $');
  console.log();
  console.log('    # build with plugins');
  console.log('    $ component build -u foo,bar,baz');
  console.log();
});

// parse argv

program.parse(process.argv);

// component.json required

if (!exists('component.json')) utils.fatal('missing component.json');

// load json

var conf = require(path.resolve('component.json'));

// standalone

var standalone = program.standalone;

// output paths

var jsPath = path.join(program.out, program.fileName || program.name + '.js');
var cssPath = path.join(program.out, program.fileName || program.name + '.css');

// mkdir -p

mkdir.sync(program.out);

// build

var builder = new Builder(process.cwd());
if (program.copy) builder.copyFiles();
builder.copyAssetsTo(program.out);
if (program.dev) builder.prefixUrls('./');
if (program.prefix) builder.prefixUrls(program.prefix);

// require middleware plugins
if (program.use) {
  var modules = program.use.split(',');
  modules.forEach(function(mod){
    var resolved = path.resolve(mod)
      , real = exists(resolved) || exists(resolved + '.js')
      , module = path.resolve('node_modules', mod);

    builder.use(real ? require(resolved) : require(module));
  });
}

var start = new Date;

// --dev

if (program.dev) {
  builder.development();
  builder.addSourceURLs();
}


// js
function buildScripts(err, js, fn){
  if (err) return fn(err)

  var out = '';
  var name = 'string' == typeof standalone
    ? standalone
    : conf.name;

  if (standalone) out += ';(function(){\n';
  if (program.require) out += requirejs;
  out += js;

  if (standalone) {
    var umd = [
      'if (typeof exports == "object") {',
      '  module.exports = require("' + conf.name + '");',
      '} else if (typeof define == "function" && define.amd) {',
      '  define(function(){ return require("' + conf.name + '"); });',
      '} else {',
      '  this["' + name + '"] = require("' + conf.name + '");',
      '}'
    ];

    out += umd.join('\n');
    out += '})();';
  }

  fs.writeFile(jsPath, out);

  if (program.verbose)
    log('write', jsPath);
    log('js', (out.length / 1024 | 0) + 'kb');

  fn(null, js);
}


// css
function buildStyles(fn){
  builder.buildStyles(function(err, css){
    if (err) return fn(err);
    var css = css.trim();

    if (program.verbose)
      log('write', cssPath);
      log('css', (css.length / 1024 | 0) + 'kb');

    fs.writeFile(cssPath, css);

    fn(null, css);
  });
}

// build

if (program.verbose) console.log();

var buildables = ["js", "css"]
  , toBuild = []
  , batch = new Batch
  , builders = {
      js: function(fn){
        var b = new Batch
        b.push(builder.buildScripts.bind(builder))
        b.push(builder.buildAliases.bind(builder))
        b.end(function(err, res){
          if (err) throw err;
          var js = res.shift() + '\n' + res.shift() + '\n' + builder._js;
          buildScripts(err, js, fn);
        });
      }
    , css: buildStyles
  };

// look for specific build flags
buildables.forEach(function(buildable){
  if (program[buildable])
    toBuild.push(buildable);
});

// if no specific build flags, build everything
if (toBuild.length === 0)
  toBuild = buildables;

// push buildables into our batch
toBuild.forEach(function(buildable){
  batch.push(builders[buildable]);
});

if (program.verbose)
  log('building', toBuild)

// run the batch
batch.end(function(err){
  if (err) utils.fatal(err);
  if (!program.verbose) return;
  var duration = new Date - start;
  log('duration', duration + 'ms');
  console.log();
});

