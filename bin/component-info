#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , fs = require('fs')
  , path = require('path')
  , resolve = path.resolve
  , join = path.join
  , component = require('..');

// usage

program.usage('<name> [prop]')
  .option('-u, --unix', 'output arrays unix-style');

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # output remote component.json');
  console.log('    $ component info component/tip');
  console.log();
  console.log('    # output version only');
  console.log('    $ component info component/tip version');
  console.log();
});

// parse argv

program.parse(process.argv);

// package

var pkg = program.args.shift();

// props

var props = program.args.shift();

// lookup info

var parts = pkg.split('@');

pkg = parts.shift();
var version = parts.shift() || 'master';

// local lookup
function local(path, fn){
  path = resolve(join(path, 'component.json'));
  fs.readFile(path, 'utf8', function(err, data){
    fn(err, JSON.parse(data))
  });
}

function render(json){
  // output
  if ('string' == typeof json) {
    process.stdout.write(json);
  } else if (program.unix && Array.isArray(json)) {
    json.forEach(function(x){
      render(x);
      process.stdout.write("\n");
    });
  } else if (json == null) {
  } else {
    process.stdout.write(JSON.stringify(json, null, 2));
  }
}

function handle(err, json){
  if (err) throw err;

  // reduce props
  if (props) {
    props.split('.').forEach(function(prop){
      json = json[prop];
    });
  }

  render(json);
}

if (pkg[0] == ".") local(pkg, handle);
else component.info(pkg, version, handle);

